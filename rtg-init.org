#+TITLE: Sitesonix Emacs Configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: hideall

* Configuration

** 01. Introduction

#+BEGIN_SRC emacs-lisp :tangle yes
;;; package --- Summary

;;; Commentary: Personalized init file for Emacs Prelude.

;; Copyright (c) 2017 Ryan Griffith
;;
;; Author: Ryan Griffith <ryan@sitesonix.net>
;; URL: https://sitesonix.net/
;; Version: 1.2
;; Keywords: org gtd web

;; This file is not a part of GNU Emacs.

;;; License:

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Sections:

;; 01. Introduction
;; 02. Prelude Require Packages
;; 03. Basic Editor Preferences
;; 04. Terminals and Shells
;; 05. Theme Preferences
;; 06. Dired and Ibuffer Tweaks
;; 07. Mode Activation/Keybindings
;; 08. Org Mode Configuration
;; 09. Web Development
;; 10. Miscellaneous Stuff
;; 11. Close Init
#+END_SRC

** 02. Prelude Require Packages

Prelude's require package section.

#+BEGIN_SRC emacs-lisp :tangle yes
(prelude-require-packages '(ac-emmet
                            ac-js2
                            apache-mode
                            auto-complete
                            autopair
                            bbdb
                            bookmark+
                            company-web
                            ctags
                            dired+
                            emmet-mode
                            gnome-calendar
                            gnus-desktop-notify
                            htmlize
                            impatient-mode
                            ivy
                            js2-mode
                            js2-refactor
                            lorem-ipsum
                            multi-term
                            multiple-cursors
                            olivetti
                            org2blog
                            org-password-manager
                            org-projectile
                            paredit
                            project-explorer
                            simple-httpd
                            skewer-mode
                            twittering-mode
                            web-beautify
                            ztree))
#+END_SRC

** 03. Basic Editor Preferences

Set my user details.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq full-name "Ryan Griffith")
(setq user-mail-address "ryan@sitesonix.net")
#+END_SRC

Customize the scratch buffer (for me).

#+BEGIN_SRC emacs-lisp :tangle yes
(setq initial-scratch-message
      ";; The GNU GPL was not designed to be open source. - RMS\n\n")
#+END_SRC

Set the default coding system to UTF-8.

#+BEGIN_SRC emacs-lisp :tangle yes
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC

Set a reasonable default font size.

#+BEGIN_SRC emacs-lisp :tangle yes
(set-face-attribute 'default nil :height 100)
#+END_SRC

I like cursor blinking enabled because I can find it more easily.

#+BEGIN_SRC emacs-lisp :tangle yes
(blink-cursor-mode t)
#+END_SRC

Use modeline flash as a visible bell.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun rtg/flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.05 nil 'invert-face 'mode-line))
(setq-default
 ring-bell-function 'rtg/flash-mode-line)
#+END_SRC

The scroll bar isn't necessary.

#+BEGIN_SRC emacs-lisp :tangle yes
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

Display the date and time in the mode line.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq display-time-day-and-date t
      display-time-12hr-format t)
(display-time)
#+END_SRC

Windmove for org-mode settings.

#+BEGIN_SRC emacs-lisp :tangle yes
;; Redefine the default Emacs suspend keybinding...
(global-unset-key (kbd "C-z")) ; windmove prefix
(global-set-key (kbd "C-z C-z") 'suspend-frame)
;; so that windmove plays nice with org-mode
(global-set-key (kbd "C-z <left>") 'windmove-left)
(global-set-key (kbd "C-z <down>") 'windmove-down)
(global-set-key (kbd "C-z <up>") 'windmove-up)
(global-set-key (kbd "C-z <right>") 'windmove-right)
;; where S <left/right/up/down> still works outside org
#+END_SRC

Smart tab behavior: indent or complete?

#+BEGIN_SRC emacs-lisp :tangle yes
(setq tab-always-indent 'complete)
#+END_SRC

Certainly nice to have minibuffer evaluations for paredit.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
#+END_SRC

Set the frame title to show filename plus working directory. I generally
hide the title bar via GNOME Shell plugin on my machines, but it shows up if
I'm using my config on another system. Might as well show something useful.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq uniquify-buffer-name-style 'reverse)
(setq inhibit-default-init t)
(setq-default frame-title-format "%b (%f)")
(global-set-key "\M-n" "\C-u1\C-v")
(global-set-key "\M-p" "\C-u1\M-v")
#+END_SRC

Some mods and tweaks in the echo area:

#+BEGIN_SRC emacs-lisp :tangle yes
(setq echo-keystrokes 0.1
      use-dialog-box nil
      visible-bell nil)
#+END_SRC

I do not like clutter in my working directories. So, I choose
to bounce the ~ backup files into their own directory.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

In general, I think it's best to cleanup whitespace before save.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

In my world, yes should always be y.

#+BEGIN_SRC emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

For the sake of completeness I like to add a new line at the end of
a given file.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq require-final-newline t)
#+END_SRC

** 04. Terminals and Shells

Setup bash for use with multi-term.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq multi-term-program "/bin/bash")
#+END_SRC

Setup multi-term for practical use.

#+BEGIN_SRC emacs-lisp :tangle yes
(when (require 'multi-term nil t)
  (global-set-key (kbd "C-x t") 'multi-term)
  (global-set-key (kbd "<C-next>") 'multi-term-next)
  (global-set-key (kbd "<C-prior>") 'multi-term-prev)
  (setq multi-term-buffer-name "mterm"
        multi-term-program "/bin/bash"))
#+END_SRC

Declare multi-term keybindings.

#+BEGIN_SRC emacs-lisp :tangle yes
(when (require 'term nil t) ; only if term can be loaded..
  (setq term-bind-key-alist
        (list (cons "C-c C-c" 'term-interrupt-subjob)
              (cons "C-p" 'previous-line)
              (cons "C-n" 'next-line)
              (cons "M-f" 'term-send-forward-word)
              (cons "M-b" 'term-send-backward-word)
              (cons "C-c C-j" 'term-line-mode)
              (cons "C-c C-k" 'term-char-mode)
              (cons "M-DEL" 'term-send-backward-kill-word)
              (cons "M-d" 'term-send-forward-kill-word)
              (cons "<C-left>" 'term-send-backward-word)
              (cons "<C-right>" 'term-send-forward-word)
              (cons "C-r" 'term-send-reverse-search-history)
              (cons "M-p" 'term-send-raw-meta)
              (cons "M-y" 'term-send-raw-meta)
              (cons "C-y" 'term-send-raw))))
#+END_SRC

Prompt for password and then open files owned by root.
Not sure where else to put this. Still use but switching
to ivy, swiper and counsel. But hey it still works for now.

#+BEGIN_SRC emacs-lisp :tangle yes
(defadvice ido-find-file (after find-file-sudo activate)
  "Find file as root if necessary."
  (unless (and buffer-file-name
               (file-writable-p buffer-file-name))
    (find-alternate-file (concat "/sudo:root@gnutop:" buffer-file-name))))
#+END_SRC

** 05. Theme Preferences

I use Emacs built-in customize for themes. Usually the sanityinc tomorrow
night theme but not always.

#+BEGIN_SRC emacs-lisp :tangle yes
(disable-theme 'zenburn)
#+END_SRC

Enable transparency for frames and windows.

#+BEGIN_SRC emacs-lisp :tangle yes
(set-frame-parameter (selected-frame) 'alpha '(92 50))
(add-to-list 'default-frame-alist '(alpha 92 50))
(eval-when-compile (require 'cl))
(defun toggle-transparency ()
  (interactive)
  (if (/=
       (cadr (frame-parameter nil 'alpha))
       100)
      (set-frame-parameter nil 'alpha '(100 100))
    (set-frame-parameter nil 'alpha '(92 50))))
(defun transparency (92)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))
;; Toggle the transparency with F5
(global-set-key [f5] 'toggle-transparency)
#+END_SRC

** 06. Dired & Ibuffer Tweaks

dired: Human readable sizes and sort by size.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq dired-listing-switches "-alh")
#+END_SRC

dired: Work better with files in different directories.

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'find-dired)
(setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))
#+END_SRC

Ibuffer: Use Gnus-style grouping for list.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("www" (or
                       (mode . web-mode)
                       (mode . js-mode)
                       (mode . js2-mode)
                       (mode . css-mode)))
               ("org" (or
                           (name . "^\\*Calendar\\*$")
                           (name . "^diary$")
                           (mode . org-mode)))
               ("gnus" (or
                        (mode . message-mode)
                        (mode . bbdb-mode)
                        (mode . mail-mode)
                        (mode . gnus-group-mode)
                        (mode . gnus-summary-mode)
                        (mode . gnus-article-mode)
                        (name . "^\\.bbdb$")
                        (name . "^\\.newsrc-dribble")))
               ("eww" (or
                       (mode . eww-mode)
                       (mode . eww-bookmark-mode)))
               ("emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")))))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

Ibuffer: Use human readable size column instead of original one.

#+BEGIN_SRC emacs-lisp :tangle yes
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))
#+END_SRC

Ibuffer: Modify the default ibuffer-formats.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq ibuffer-formats
      '((mark modified read-only " "
              (name 18 18 :left :elide)
              " "
              (size-h 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              filename-and-process)))
#+END_SRC

** 07. Mode Specific (General)

Enable ivy mode completion everywhere.

#+BEGIN_SRC emacs-lisp :tangle yes
(ivy-mode 1)
#+END_SRC

Basic ivy settings.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
#+END_SRC

Disable guru-mode because arrow keys are sometimes useful.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq prelude-guru nil)
#+END_SRC

Enable winner-mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(winner-mode 1)
#+END_SRC

Enable which-key mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(which-key-mode)
#+END_SRC

Enable undo-tree-mode visualization with C-x u.

#+BEGIN_SRC emacs-lisp :tangle yes
(global-undo-tree-mode)
#+END_SRC

Enable toggle for project explorer.

#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-c SPC") 'project-explorer-toggle)
;; NOTE: when outside of a project I like to use the built-in M-x speedbar
#+END_SRC

Enable and set ztree keybindings.

#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-c z") 'ztree-diff)
(global-set-key (kbd "C-c Z") 'ztree-dir)
#+END_SRC

Enable and set multiple cursors keybindings

#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** 08. Org-mode Setup

Main files are found here. Add new project files to the list as needed.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-files
      (list "~/org/gtd.org"
            "~/org/work.org"
            "~/org/personal.org"))
#+END_SRC

Set the interactive gtd file.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun gtd ()
  (interactive)
  (find-file "~/org/gtd.org")
  )
#+END_SRC

Ensure that auto fill mode is an option for org and other text docs.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'text-mode-hook
          (lambda ()
            (when (y-or-n-p "Auto Fill mode? ")
              (turn-on-auto-fill))))
;; and set the keybinding
(global-set-key (kbd "C-c q") 'auto-fill-mode)
;; otherwise set visual-line-mode or olivetti for distraction-free writing
#+END_SRC

Setup org mode agenda.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'load-path "~/emacs/org")
(require 'org)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
#+END_SRC

Custom org-agenda commands.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-custom-commands
      '(("w" todo "WAITING" nil)
        ("n" todo "NEXT" nil)
        ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT"))))
      )
#+END_SRC

Function to capture a todo.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun rtg/org-capture-todo ()
  (interactive)
  "Capture a TODO item"
  (org-capture nil "t"))
;; bind
(define-key global-map (kbd "C-7") 'rtg/org-capture-todo)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;; Org-projectile for per-repo TODO files -- package is broken
;; (require 'org-projectile)
;; (org-projectile:per-repo)
;; (setq org-projectile:per-repo-filename "project.org")
;; (setq org-agenda-files (append org-agenda-files (org-projectile:todo-files)))
;; (global-set-key (kbd "C-c c") 'org-capture)
;; (global-set-key (kbd "C-c n p") 'org-projectile:project-todo-completing-read)
#+END_SRC

Org-capture to my personal.org file.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-default-notes-file "~/org/personal.org")
;; Org-capture keybinding
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

Refile: show all headings from all agenda files.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 5))))
#+END_SRC

Set return to activate a link.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-return-follows-link t)
#+END_SRC

Extra org modules and export backends.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-modules '(org-bbdb
                    org-gnus))
(eval-after-load 'org
  '(org-load-modules-maybe t))
#+END_SRC

Prepare stuff for org-export-backends.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-export-backends '(org latex html ascii))
#+END_SRC


The following org-agenda hacks are borrowed from Sacha Chua's config
http://pages.sachachua.com/.emacs.d/Sacha.html#org6eefca2
What I was trying to do was already out there. :-)

Mark TODO as done by simply hitting 'x'.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun rtg/org-agenda-done (&optional arg)
  "Mark current TODO as done.
This changes the line at point, all other lines in the agenda referring to
the same tree node, and the headline of the tree node in the Org-mode file."
  (interactive "P")
  (org-agenda-todo "DONE"))
;; Override the key definition for org-exit
(define-key org-agenda-mode-map "x" 'rtg/org-agenda-done)
#+END_SRC

Mark TODO as done with 'X' and then create new task at same level.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun rtg/org-agenda-mark-done-and-add-followup ()
  "Mark the current TODO as done and add another task after it.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
  (interactive)
  (org-agenda-todo "DONE")
  (org-agenda-switch-to)
  (org-capture 0 "t"))
;; Override the key definition
(define-key org-agenda-mode-map "X" 'rtg/org-agenda-mark-done-and-add-followup)
#+END_SRC

Capture something based on the agenda.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun rtg/org-agenda-new ()
  "Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
  (interactive)
  (org-agenda-switch-to)
  (org-capture 0))
;; New key assignment
(define-key org-agenda-mode-map "N" 'rtg/org-agenda-new)
#+END_SRC

Keep track of unscheduled tasks and stuck projects.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun rtg/org-agenda-list-unscheduled (&rest ignore)
  "Create agenda view for tasks that are unscheduled and not done."
  (let* ((org-agenda-todo-ignore-with-date t)
         (org-agenda-overriding-header "List of unscheduled tasks: "))
    (org-agenda-get-todos)))
(setq org-stuck-projects
      '("+PROJECT-MAYBE-DONE"
        ("TODO")
        nil
        "\\<IGNORE\\>"))
#+END_SRC

** 09. Web Development

Align code in a pretty way.

#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-x \\") #'align-regexp)
#+END_SRC

Enable emmet for web mode and css mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'web-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook  'emmet-mode)
#+END_SRC

Get company-mode to work with web-mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(eval-after-load 'company-etags
  '(progn
     (add-to-list 'company-etags-modes 'web-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(eval-after-load 'web-mode '(define-key web-mode-map (kbd "s-d") 'php-jump))
#+END_SRC

Set default mode for Javascript files.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.js" . js-mode))
#+END_SRC

Set default mode for JSON files.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.json$" . json-mode))
#+END_SRC

Add hooks for js2 mode and auto-complete.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
#+END_SRC

yasnippet should be loaded before auto complete so that they can work together.
Load yasnippets:

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'load-path
             "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC

yasnippet expansion and completion with dropdown.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq yas-prompt-functions '(yas-x-prompt yas-dropdown-prompt))
#+END_SRC

Auto-complete.

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
(setq ac-auto-start 3)
(add-to-list 'ac-modes 'web-mode)
(setq ac-ignore-case t)
(setq ac-auto-start nil)
(global-set-key (kbd "C-<tab>") 'auto-complete)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;;; auto complete mode
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
#+END_SRC

Set the trigger key so that it can work together with yasnippet on tab key.
If the word exists in yasnippet, pressing tab will cause yasnippet to
activate, otherwise, auto-complete will.

#+BEGIN_SRC emacs-lisp :tangle yes
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")
#+END_SRC

Require web-mode for mixed templates with HTML, CSS and PHP.

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.scss\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist
            '("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode))
#+END_SRC

Make web-mode play nice with smartparens.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq web-mode-enable-auto-pairing nil)
#+END_SRC

Require auto-complete for web-mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
(setq ac-auto-start 3)
(add-to-list 'ac-modes 'web-mode)
(setq ac-ignore-case t)
(setq ac-auto-start nil)
(global-set-key (kbd "C-<tab>") 'auto-complete)
#+END_SRC

Require impatient mode to start after invoking simple httpd mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'load-path "~/.emacs.d/impatient-mode")
(require 'impatient-mode)
#+END_SRC

Add hooks for skewer mode.

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'js2-mode-hook 'skewer-mode)
(add-hook 'web-mode-hook 'skewer-css-mode)
(add-hook 'web-mode-hook 'skewer-html-mode)
#+END_SRC

** 10. Miscellaneous Stuff

Hippie expand is dabbrev expand on steroids.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))
#+END_SRC

Use hippie-expand instead of dabbrev.

#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "M-/") #'hippie-expand)
(global-set-key (kbd "s-/") #'hippie-expand)
#+END_SRC

Delighted: no clutter - C-h m instead for active minor modes.

#+BEGIN_SRC emacs-lisp :tangle yes
(delight '((auto-complete-mode nil "auto-complete")
           (beacon-mode nil "beacon")
           (company-mode nil "company")
           (emmet-mode nil "emmet-mode")
           (flycheck-mode nil "flycheck")
           (flyspell-mode nil "flyspell")
           (prelude-mode nil "prelude-mode")
           (projectile-mode nil "projectile")
           (smartparens-mode nil "smartparens")
           (skewer-mode nil "skewer-mode")
           (skewer-css-mode nil "skewer-css")
           (skewer-html-mode nil "skewer-html")
           (which-key-mode nil "which-key")
           (whitespace-mode nil "whitespace")
           (yas-minor-mode nil "yasnippet")
           (emacs-lisp-mode "EL" :major)))
#+END_SRC

BBDB: Allow for adding birthdays to records.

#+BEGIN_SRC emacs-lisp :tangle yes
(defadvice bbdb-read-new-record (after wicked activate)
  "Prompt for the birthdate as well."
  (bbdb-record-putprop ad-return-value 'birthdate
                       (bbdb-read-string "Birthdate (YYYY.MM.DD): ")))
#+END_SRC

Browsing choices: EWW or Firefox.

#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'gk-urls-external-browser 'browse-url-xdg-open)
(defun gk-browse-url (&rest args)
  "Prompt for whether or not to browse with EWW, if no browse
with external browser."
  (apply
   (if (y-or-n-p "Browse with EWW? ")
       'eww-browse-url
     'gk-urls-external-browser)
   args))
(setq browse-url-browser-function #'gk-browse-url)
#+END_SRC

Allow for the generation of multiple eww buffers.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun eww-new ()
  (interactive)
  (let ((url (read-from-minibuffer "Enter URL or keywords: ")))
    (switch-to-buffer (generate-new-buffer "eww"))
    (eww-mode)
    (eww url)))
#+END_SRC

** 11. Close Init

#+BEGIN_SRC emacs-lisp :tangle yes
;; End init file...
(provide 'rtg-init)
;;; rtg-init.el ends here
#+END_SRC
